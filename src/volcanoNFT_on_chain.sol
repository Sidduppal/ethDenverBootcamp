// SPDX-License-Identifier: UNLICENSED
// Contract adapter from https://gist.github.com/Chmarusso/045ee79fa9a1fae55928a613044c9067
// https://docs.openzeppelin.com/contracts/4.x/erc721
// import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
// import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
// import "@openzeppelin/contracts/utils/Counters.sol";
// import "@openzeppelin/contracts/access/Ownable.sol";

import "openzeppelin-contracts/token/ERC721/ERC721.sol";
import "openzeppelin-contracts/utils/Counters.sol";
import "openzeppelin-contracts/access/Ownable.sol";
// Converts bytes to Base 64
import {Base64} from "./Base64.sol";

pragma solidity ^0.8.7;

contract VolcanoNFT is Ownable, ERC721 {
    // https://ethereum.stackexchange.com/a/116726
    // https://ethereum.stackexchange.com/a/96792
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    uint256 public balanceMe;

    constructor() ERC721("volcanicRock", "theRock") {}

    mapping(uint256 => Attr) public attributes;

    struct Attr {
        string name;
        string material;
        uint8 speed;
        uint8 attack;
        uint8 defence;
    }

    function getBalance() public view returns (uint256) {
        return msg.sender.balance;
    }

    function mintNFT(
        address _user,
        string memory _name,
        string memory _material,
        uint8 _speed,
        uint8 _attack,
        uint8 _defence
    ) public {
        uint256 nftID = _tokenIds.current();
        // Increase the counter
        _tokenIds.increment();
        _safeMint(_user, nftID);
        attributes[nftID] = Attr(_name, _material, _speed, _attack, _defence);
    }

    function transferNft(
        address _from,
        address _to,
        uint256 _tokenId
    ) public {
        safeTransferFrom(_from, _to, _tokenId);
    }

    function getSvg(uint256 tokenId) private view returns (string memory) {
        string memory svg;
        // Got the svg from here https://www.svgviewer.dev/s/76168/volcano
        svg = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512.001 512.001" style="enable-background:new 0 0 512.001 512.001" xml:space="preserve"><path style="fill:#e66a8c" d="M370.969 55.366c-27.792 0-53.045 10.866-71.747 28.578a89.313 89.313 0 0 1 16.785-23.378c12.034-12.034 12.034-31.547 0-43.581s-31.547-12.034-43.581 0a111.222 111.222 0 0 0-25.169 38.735 94.038 94.038 0 0 0-18.932-27.216c-15.358-15.358-40.26-15.358-55.618 0s-15.358 40.26 0 55.618a84.62 84.62 0 0 1 9.149 10.869 80.393 80.393 0 0 0-27.414-5.433 36.603 36.603 0 0 0-1.661-.042c-.052 0-.104-.004-.156-.004-19.497 0-35.304 15.806-35.304 35.304s15.806 35.304 35.304 35.304c20.858 0 37.767 16.909 37.767 37.767v4.048h131.757v-6.476c0-26.963 21.858-48.821 48.821-48.821 25.204 0 45.637-20.432 45.637-45.637s-20.434-45.635-45.638-45.635z"/><path style="opacity:.2;fill:#fff;enable-background:new" d="M289.128 8.39c-7.424 5.395-12.255 14.141-12.255 24.02 0 16.391 13.288 29.678 29.678 29.678 3.322 0 6.512-.554 9.493-1.56 11.996-12.037 11.984-31.519-.037-43.541-7.317-7.317-17.395-10.178-26.879-8.597zm-98.348 9.822a32.725 32.725 0 0 0-.806 7.194c0 18.013 14.603 32.615 32.615 32.615 8.313 0 15.896-3.115 21.656-8.236-4.243-7.74-9.565-14.925-15.92-21.279-10.176-10.178-24.542-13.604-37.545-10.294zm180.189 37.154c-6.024 0-11.927.513-17.672 1.492-7.056 7.263-11.408 17.167-11.408 28.093 0 22.274 18.056 40.33 40.33 40.33 14.314 0 26.878-7.464 34.035-18.706.223-1.828.351-3.685.351-5.573.001-25.204-20.432-45.636-45.636-45.636z"/><path style="opacity:.1;enable-background:new" d="M200.283 185.575a.427.427 0 0 0-.004-.039c-1.934-19.044-18.018-33.906-37.572-33.906-19.497 0-35.304-15.806-35.304-35.304a35.148 35.148 0 0 1 7.926-22.283c-10.746 6.053-18.008 17.562-18.008 30.774 0 19.497 15.806 35.304 35.304 35.304 20.858 0 37.767 16.909 37.767 37.767v4.048h131.757v-6.476c0-.676.023-1.346.051-2.014H208.821c-4.46-.002-8.126-3.432-8.538-7.871z"/><path style="fill:#9b7e73" d="M333.434 201.935H178.567a28.4 28.4 0 0 0-25.103 15.117L13.735 481.086c-5.511 10.416 2.039 22.954 13.823 22.954h456.886c11.784 0 19.335-12.538 13.823-22.954l-139.73-264.034a28.404 28.404 0 0 0-25.103-15.117z"/><path style="opacity:.1;enable-background:new" d="M53.737 487.915c-11.784 0-19.335-12.538-13.823-22.954l139.195-263.025h-.542a28.4 28.4 0 0 0-25.103 15.117L13.735 481.086c-5.511 10.416 2.039 22.954 13.823 22.954h456.886c9.264 0 15.907-7.75 15.649-16.125H53.737z"/><circle style="fill:#e66a8c" cx="256.001" cy="401.995" r="26.281"/><path d="M168.626 301.815a7.96 7.96 0 0 1-7.788-9.642c2.844-13.162 10.529-21.452 16.704-28.113 3.654-3.942 6.81-7.348 7.905-10.597a7.962 7.962 0 0 1 10.084-5.005 7.96 7.96 0 0 1 5.005 10.084c-2.184 6.49-6.829 11.499-11.319 16.343-5.603 6.044-10.896 11.753-12.819 20.653a7.962 7.962 0 0 1-7.772 6.277zm250.538 123.528a7.96 7.96 0 0 1-7.85-6.701c-.951-5.932-5.42-10.583-10.153-15.508-3.823-3.978-7.775-8.093-10.108-13.231a7.96 7.96 0 0 1 14.496-6.582c1.207 2.658 4.065 5.632 7.093 8.782 5.638 5.867 12.653 13.168 14.393 24.019a7.958 7.958 0 0 1-7.871 9.221zM65.323 483.939a7.96 7.96 0 0 1-7.75-9.805c2.413-10.141 10.464-18.102 18.248-25.8 5.506-5.445 11.2-11.076 13.226-16.189a7.956 7.956 0 0 1 10.332-4.468 7.96 7.96 0 0 1 4.469 10.332c-3.256 8.221-10.158 15.045-16.833 21.647-6.193 6.124-12.596 12.456-13.955 18.165a7.963 7.963 0 0 1-7.737 6.118zm245.872-215.202a7.96 7.96 0 0 1-7.126-4.402c-1.251-2.502-4.832-6.657-7.99-10.322-5.121-5.942-9.958-11.554-11.602-16.899a7.96 7.96 0 0 1 5.266-9.949 7.958 7.958 0 0 1 9.949 5.267c.664 2.159 5.347 7.593 8.446 11.188 4.131 4.794 8.032 9.32 10.17 13.595a7.958 7.958 0 0 1-3.559 10.679 7.91 7.91 0 0 1-3.554.843zm-32.905 58.485a7.96 7.96 0 0 1-7.96-7.96c0-4.622-2.31-7.301-6.393-11.637-2.705-2.873-5.77-6.128-7.751-10.467a7.96 7.96 0 0 1 3.935-10.546 7.958 7.958 0 0 1 10.547 3.935c.888 1.949 2.728 3.901 4.859 6.164 4.525 4.806 10.723 11.387 10.723 22.55a7.96 7.96 0 0 1-7.96 7.961zM148.558 444.899a7.96 7.96 0 0 1-7.814-9.518c.777-3.899 3.753-7.131 8.256-12.02 2.943-3.197 7.87-8.546 8.555-11.033a7.96 7.96 0 0 1 9.789-5.559 7.958 7.958 0 0 1 5.559 9.789c-1.71 6.207-7.279 12.254-12.192 17.589-1.652 1.794-3.873 4.205-4.604 5.297a7.965 7.965 0 0 1-7.549 5.455zm7.799-6.404-.001.007.001-.007zm215.605 35.607a7.954 7.954 0 0 1-7.033-4.221c-2.983-5.603-5.538-7.269-8.772-9.378-3.461-2.257-7.768-5.068-11.508-11.665a7.96 7.96 0 0 1 13.851-7.85c1.83 3.229 3.532 4.34 6.354 6.18 4.106 2.679 9.219 6.012 14.126 15.23a7.96 7.96 0 0 1-3.286 10.767 7.9 7.9 0 0 1-3.732.937z" style="opacity:.2"/><path d="M278.995 180.823a7.96 7.96 0 0 1-7.96-7.96c0-13.567 6.843-39.104 25.697-53.851a7.961 7.961 0 0 1 9.809 12.539c-13.51 10.568-19.586 30.519-19.586 41.313a7.96 7.96 0 0 1-7.96 7.959zm-50.589-36.792a7.96 7.96 0 0 1-7.96-7.96c0-6.419-10.137-30.183-13.386-33.989-2.921-3.286-2.62-8.312.664-11.233 3.286-2.92 8.32-2.62 11.241.665 5.462 6.144 17.4 33.83 17.4 44.557a7.96 7.96 0 0 1-7.959 7.96z" style="opacity:.1"/><path d="M160.427 342.87a7.96 7.96 0 0 0-7.96 7.96v8.789a7.96 7.96 0 0 0 15.92 0v-8.789a7.96 7.96 0 0 0-7.96-7.96zM351.891 44.929a7.919 7.919 0 0 0 3.83-.988c17.104-9.413 35.641-15.042 55.093-16.732a7.959 7.959 0 0 0 7.241-8.619c-.38-4.379-4.24-7.628-8.618-7.241-21.676 1.882-42.332 8.155-61.393 18.643a7.96 7.96 0 0 0-3.135 10.812 7.957 7.957 0 0 0 6.982 4.125zM76.563 57.731c18.638-3.951 38.429-.176 54.303 10.361a7.922 7.922 0 0 0 4.395 1.329 7.959 7.959 0 0 0 4.409-14.593c-19.413-12.884-43.617-17.503-66.409-12.67a7.96 7.96 0 0 0-6.135 9.438c.911 4.3 5.135 7.051 9.437 6.135zm-5.841 57.428a7.933 7.933 0 0 0 3.457-.795 37.288 37.288 0 0 1 18.934-3.607c4.381.326 8.2-2.968 8.523-7.353a7.958 7.958 0 0 0-7.353-8.523 53.26 53.26 0 0 0-27.03 5.148 7.961 7.961 0 0 0 3.469 15.13zm303.123 62.947a7.958 7.958 0 0 0 .906 11.22 7.923 7.923 0 0 0 5.153 1.898 7.945 7.945 0 0 0 6.068-2.802 41.703 41.703 0 0 1 35.193-14.511c4.359.365 8.231-2.885 8.598-7.266a7.961 7.961 0 0 0-7.267-8.598c-18.452-1.546-36.646 5.95-48.651 20.059zm131.456 299.257L365.573 213.329a36.281 36.281 0 0 0-32.139-19.353h-3.288c.785-21.845 18.791-39.377 40.824-39.377 29.553 0 53.597-24.043 53.597-53.597s-24.043-53.597-53.597-53.597c-14.48 0-28.598 2.751-41.72 7.999 6.818-14.396 4.279-32.154-7.613-44.047C314.313 4.033 304.574 0 294.217 0c-10.357 0-20.096 4.033-27.418 11.357-8.048 8.047-14.81 17.056-20.209 26.91a101.624 101.624 0 0 0-12.636-15.391c-18.437-18.437-48.438-18.438-66.875 0-16.018 16.017-18.12 40.763-6.306 59.072a89.896 89.896 0 0 0-6.045-.345 44.777 44.777 0 0 0-1.829-.047 14.832 14.832 0 0 0-.275-.004c-23.856 0-43.264 19.408-43.264 43.264s19.408 43.264 43.264 43.264c15.109 0 27.62 11.303 29.542 25.895h-3.6a36.279 36.279 0 0 0-32.139 19.353L6.699 477.363c-3.906 7.381-3.666 16.059.642 23.213 4.308 7.153 11.866 11.425 20.216 11.425h456.885c8.35 0 15.908-4.271 20.217-11.425 4.308-7.154 4.549-15.833.642-23.213zM152.624 152.16c-15.078 0-27.344-12.267-27.344-27.344 0-15.048 12.219-27.296 27.257-27.344l.206.004c.434.002.866.011 1.295.032.075.004.152.006.228.008 8.525.189 16.838 1.835 24.706 4.895a7.961 7.961 0 0 0 9.374-12.027 92.937 92.937 0 0 0-10.01-11.889c-12.23-12.231-12.23-32.131 0-44.362 12.232-12.23 32.132-12.23 44.361 0 7.208 7.208 13.039 15.591 17.329 24.916a7.963 7.963 0 0 0 7.487 4.628 7.957 7.957 0 0 0 7.174-5.099c5.221-13.581 13.084-25.681 23.368-35.964a22.696 22.696 0 0 1 16.161-6.696 22.705 22.705 0 0 1 16.162 6.695c8.912 8.912 8.912 23.413 0 32.324-7.414 7.415-13.567 15.982-18.283 25.461a7.96 7.96 0 0 0 12.6 9.324c17.976-17.022 41.51-26.398 66.273-26.398 20.775 0 37.677 16.901 37.677 37.677s-16.901 37.677-37.677 37.677c-30.811 0-55.951 24.672-56.743 55.297H198.173c-1.993-23.388-21.653-41.815-45.549-41.815zm338.397 340.202c-.673 1.118-2.662 3.718-6.578 3.718H27.557c-3.917 0-5.906-2.6-6.579-3.718-.673-1.118-2.041-4.091-.209-7.553l139.729-264.034a20.396 20.396 0 0 1 18.068-10.881h154.868a20.395 20.395 0 0 1 18.068 10.881L491.23 484.809c1.833 3.462.464 6.436-.209 7.553zM351.574 312.674c-11.201 0-21.649 6.026-27.266 15.728a7.96 7.96 0 1 0 13.775 7.977c2.781-4.802 7.95-7.786 13.49-7.786a15.636 15.636 0 0 1 13.491 7.789 7.96 7.96 0 1 0 13.778-7.973c-5.615-9.706-16.064-15.735-27.268-15.735zM256 367.755c-18.881 0-34.241 15.36-34.241 34.241s15.36 34.241 34.241 34.241 34.241-15.36 34.241-34.241c0-18.879-15.36-34.241-34.241-34.241zm0 52.564c-10.103 0-18.322-8.219-18.322-18.322s8.219-18.322 18.322-18.322 18.322 8.219 18.322 18.322c-.001 10.103-8.22 18.322-18.322 18.322zm-95.573-107.645c-11.204 0-21.654 6.029-27.271 15.735a7.96 7.96 0 1 0 13.778 7.973c2.781-4.805 7.95-7.789 13.491-7.789 5.54 0 10.709 2.983 13.489 7.786a7.96 7.96 0 0 0 13.778-7.976c-5.616-9.702-16.064-15.729-27.265-15.729zm191.147 30.196a7.96 7.96 0 0 0-7.96 7.96v8.789a7.96 7.96 0 0 0 15.92 0v-8.789a7.96 7.96 0 0 0-7.96-7.96z"/></svg>';
        return svg;
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721)
        returns (string memory)
    {
        // Base 64 library is used so we don't get any errors from special characters
        // This part is encoding our details into a json
        string memory json = Base64.encode(
            bytes(
                string(
                    abi.encodePacked(
                        '{"name": "',
                        attributes[tokenId].name,
                        '",',
                        '"image_data": "',
                        getSvg(tokenId),
                        '",',
                        '"attributes": [{"trait_type": "Speed", "value": ',
                        uint2str(attributes[tokenId].speed),
                        "},",
                        '{"trait_type": "Attack", "value": ',
                        uint2str(attributes[tokenId].attack),
                        "},",
                        '{"trait_type": "Defence", "value": ',
                        uint2str(attributes[tokenId].defence),
                        "},",
                        '{"trait_type": "Material", "value": "',
                        attributes[tokenId].material,
                        '"}',
                        "]}"
                    )
                )
            )
        );
        return string(abi.encodePacked("data:application/json;base64,", json));
    }

    // Converst interger to strings
    function uint2str(uint256 _i)
        internal
        pure
        returns (string memory _uintAsString)
    {
        if (_i == 0) {
            return "0";
        }
        uint256 j = _i;
        uint256 len;
        while (j != 0) {
            len++;
            j /= 10;
        }
        bytes memory bstr = new bytes(len);
        uint256 k = len;
        while (_i != 0) {
            k = k - 1;
            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));
            bytes1 b1 = bytes1(temp);
            bstr[k] = b1;
            _i /= 10;
        }
        return string(bstr);
    }
}
